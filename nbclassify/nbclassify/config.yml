---
# This is an example configurations file for trainer.py and classify.py.

# Describe training data format.
data:
    # Prefix of classification columns. When generating training data, this
    # prefix is extended with a number.
    dependent_prefix: "OUT:"

# Preprocessing steps to perform on images before features are extracted.
preprocess: &preprocess_std
    # Limit the maximum perimeter for input images (optional). The input
    # image is scaled down if the image perimeter, calculated as width +
    # height, exeeds this value. The input images on disk stay unmodified.
    maximum_perimeter: 1000

    # Perform color enhancement on images.
    color_enhancement:
        # A hue preserving linear transformation with maximum possible contrast.
        naik_murthy_linear: {}

    # Perform segmentation on the image, where the background is removed.
    segmentation:
        grabcut:
            # The number of segmentation iterations. Default is 5.
            iterations: 5
            # The margin of the region of interest from the edges of the image.
            # Default is 1.
            margin: 1

# Features to be extracted from the images.
features: &features_std
    # Describes the BGR color frequencies along horizontal and vertical axis.
    color_bgr_means:
        # Each axis is divided into equal size bins. The color frequencies for
        # each bin are computed.
        bins: 50

# Parameters for training artificial neural networks.
ann: &ann_std
    # Number of hidden neuron layers. Default is 1
    hidden_layers: 1
    # Number of hidden neurons per hidden layer. Default is 8
    hidden_neurons: 20
    # Maximum number of epochs. Default is 100000
    epochs: 100000
    # Desired error. Default is 0.00001
    error: 0.00001
    # Learning rate. Default is 0.7
    learning_rate: 0.7
    # Connection rate. Default is 1, a fully connected network.
    connection_rate: 1
    # The training algorithm used for training. Default is TRAIN_RPROP.
    # See http://leenissen.dk/fann/html/files/fann_data-h.html#fann_train_enum
    training_algorithm: TRAIN_RPROP
    # The activation function for the hidden layers. Default is SIGMOID_STEPWISE.
    # See http://leenissen.dk/fann/html/files/fann_data-h.html#fann_activationfunc_enum
    activation_function_hidden: SIGMOID_SYMMETRIC
    # The activation function for the output layer. Default is SIGMOID_STEPWISE.
    # See http://leenissen.dk/fann/html/files/fann_data-h.html#fann_activationfunc_enum
    activation_function_output: SIGMOID_SYMMETRIC

ann_genus: &ann_genus
    # Number of hidden neuron layers. Default is 1
    hidden_layers: 1
    # Number of hidden neurons per hidden layer. Default is 8
    hidden_neurons: 50
    # Maximum number of epochs. Default is 100000
    epochs: 100000
    # Desired error. Default is 0.00001
    error: 0.00001
    # Learning rate. Default is 0.7
    learning_rate: 0.7
    # Connection rate. Default is 1, a fully connected network.
    connection_rate: 1
    # The training algorithm used for training. Default is TRAIN_RPROP.
    # See http://leenissen.dk/fann/html/files/fann_data-h.html#fann_train_enum
    training_algorithm: TRAIN_RPROP
    # The activation function for the hidden layers. Default is SIGMOID_STEPWISE.
    # See http://leenissen.dk/fann/html/files/fann_data-h.html#fann_activationfunc_enum
    activation_function_hidden: SIGMOID_SYMMETRIC
    # The activation function for the output layer. Default is SIGMOID_STEPWISE.
    # See http://leenissen.dk/fann/html/files/fann_data-h.html#fann_activationfunc_enum
    activation_function_output: SIGMOID_SYMMETRIC

# Configurations for classification.
classification:
    # Simplified query for filtering photos with corresponding classification
    # from the database.
    filter:
        where:
            genus: Cypripedium
            section: Arietinum
        class:
            species

    # Define the classification hierarchy from top to bottom.
    hierarchy:
        - name: genus
          preprocess: *preprocess_std
          features: *features_std
          ann: *ann_genus
          train_file: genus.tsv
          test_file: genus.tsv
          ann_file: genus.ann
          max_error: 0.00001

        - name: section
          preprocess: *preprocess_std
          features: *features_std
          ann: *ann_std
          train_file: __genus__.section.tsv
          test_file: __genus__.section.tsv
          ann_file: __genus__.section.ann
          max_error: 0.0001

        - name: species
          preprocess: *preprocess_std
          features: *features_std
          ann: *ann_std
          train_file: __genus__.__section__.species.tsv
          test_file: __genus__.__section__.species.tsv
          ann_file: __genus__.__section__.species.ann
          max_error: 0.001
